# user specific config, such as name and email
[include]
  path = ~/.gitconfig_custom
[core]
  editor = vim
  excludesfile = ~/.gitignore
[branch]
  autosetupmerge = true
[color]
  ui = true
  diff = auto
  status = auto
  branch = auto
[color "branch"]
  current = yellow reverse
  local = yellow
  remote = green
[color "diff"]
  meta = yellow
  frag = magenta bold
  old = red bold
  new = green bold
  commit = yellow bold
  whitespace = red reverse
[color "diff-highlight"]
  oldNormal = red bold
  oldHighlight = red bold 52
  newNormal = green bold
  newHighlight = green bold 22
[color "status"]
  added = yellow
  changed = green
  untracked = cyan
[diff]
  tool = vimdiff
  prompt = false
[push]
  default = simple
[tag]
  sort = version:refname
[alias]
  branch-diff = log --pretty --oneline --left-right --graph --cherry-pick
  ci = commit
  clog = !"git log --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"
  co = checkout
  conflicts = diff --name-only --diff-filter=U
  di = dsf
  diff2 = diff --word-diff
  diff3 = difftool --tool=vimdiff
  dl = "!git ll -1"
  dlc = diff --cached HEAD^
  dlog = log --date-order --graph --tags --simplify-by-decoration --pretty=format:\"%ai %h %d\"
  dsf = "!f() { [ -z \"$GIT_PREFIX\" ] || cd \"$GIT_PREFIX\" && git diff --color \"$@\" | diff-so-fancy | less --tabs=4 -RFX; }; f"
  find = !git ls-files | grep --color -i
  fl = log -u
  flog = log --stat --abbrev-commit --relative-date --pretty=oneline
  heads = !"git log origin/master.. --format='%Cred%h%Creset;%C(yellow)%an%Creset;%H;%Cblue%f%Creset' | git name-rev --stdin --branch --always --name-only | column -t -s';'"
  ld = log --pretty=format:"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=relative
  lds = log --pretty=format:"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=short
  le = log --oneline --decorate
  ll = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --numstat
  ls = ls-files
  lsb = !"git for-each-ref --format='%(refname:short)' refs/heads/$1*"
  plog = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative
  rmu = !"rm `git ls-files --others --exclude-standard`"
  slog = log --pretty=format:\"%h %s\" --graph
  st = status
  undelete = !"git checkout $(git rev-list -n 1 HEAD -- $1)^" -- $1
  undo = reset --soft HEAD^
  vim = !sh -c 'vim `git ls-files | grep $0 | head -1`'
